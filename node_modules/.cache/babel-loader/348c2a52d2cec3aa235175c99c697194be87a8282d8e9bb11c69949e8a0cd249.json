{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport { DEFAULT_MODE_STORAGE_KEY, DEFAULT_COLOR_SCHEME_STORAGE_KEY } from \"../InitColorSchemeScript/InitColorSchemeScript.js\";\nexport function getSystemMode(mode) {\n  if (typeof window !== 'undefined' && typeof window.matchMedia === 'function' && mode === 'system') {\n    const mql = window.matchMedia('(prefers-color-scheme: dark)');\n    if (mql.matches) {\n      return 'dark';\n    }\n    return 'light';\n  }\n  return undefined;\n}\nfunction processState(state, callback) {\n  if (state.mode === 'light' || state.mode === 'system' && state.systemMode === 'light') {\n    return callback('light');\n  }\n  if (state.mode === 'dark' || state.mode === 'system' && state.systemMode === 'dark') {\n    return callback('dark');\n  }\n  return undefined;\n}\nexport function getColorScheme(state) {\n  return processState(state, mode => {\n    if (mode === 'light') {\n      return state.lightColorScheme;\n    }\n    if (mode === 'dark') {\n      return state.darkColorScheme;\n    }\n    return undefined;\n  });\n}\nfunction initializeValue(key, defaultValue) {\n  if (typeof window === 'undefined') {\n    return undefined;\n  }\n  let value;\n  try {\n    value = localStorage.getItem(key) || undefined;\n    if (!value) {\n      // the first time that user enters the site.\n      localStorage.setItem(key, defaultValue);\n    }\n  } catch {\n    // Unsupported\n  }\n  return value || defaultValue;\n}\nexport default function useCurrentColorScheme(options) {\n  const {\n    defaultMode = 'light',\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    supportedColorSchemes = [],\n    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    storageWindow = typeof window === 'undefined' ? undefined : window,\n    noSsr = false\n  } = options;\n  const joinedColorSchemes = supportedColorSchemes.join(',');\n  const isMultiSchemes = supportedColorSchemes.length > 1;\n  const [state, setState] = React.useState(() => {\n    const initialMode = initializeValue(modeStorageKey, defaultMode);\n    const lightColorScheme = initializeValue(\"\".concat(colorSchemeStorageKey, \"-light\"), defaultLightColorScheme);\n    const darkColorScheme = initializeValue(\"\".concat(colorSchemeStorageKey, \"-dark\"), defaultDarkColorScheme);\n    return {\n      mode: initialMode,\n      systemMode: getSystemMode(initialMode),\n      lightColorScheme,\n      darkColorScheme\n    };\n  });\n  const [isClient, setIsClient] = React.useState(noSsr || !isMultiSchemes);\n  React.useEffect(() => {\n    setIsClient(true); // to rerender the component after hydration\n  }, []);\n  const colorScheme = getColorScheme(state);\n  const setMode = React.useCallback(mode => {\n    setState(currentState => {\n      if (mode === currentState.mode) {\n        // do nothing if mode does not change\n        return currentState;\n      }\n      const newMode = mode !== null && mode !== void 0 ? mode : defaultMode;\n      try {\n        localStorage.setItem(modeStorageKey, newMode);\n      } catch {\n        // Unsupported\n      }\n      return {\n        ...currentState,\n        mode: newMode,\n        systemMode: getSystemMode(newMode)\n      };\n    });\n  }, [modeStorageKey, defaultMode]);\n  const setColorScheme = React.useCallback(value => {\n    if (!value) {\n      setState(currentState => {\n        try {\n          localStorage.setItem(\"\".concat(colorSchemeStorageKey, \"-light\"), defaultLightColorScheme);\n          localStorage.setItem(\"\".concat(colorSchemeStorageKey, \"-dark\"), defaultDarkColorScheme);\n        } catch {\n          // Unsupported\n        }\n        return {\n          ...currentState,\n          lightColorScheme: defaultLightColorScheme,\n          darkColorScheme: defaultDarkColorScheme\n        };\n      });\n    } else if (typeof value === 'string') {\n      if (value && !joinedColorSchemes.includes(value)) {\n        console.error(\"`\".concat(value, \"` does not exist in `theme.colorSchemes`.\"));\n      } else {\n        setState(currentState => {\n          const newState = {\n            ...currentState\n          };\n          processState(currentState, mode => {\n            try {\n              localStorage.setItem(\"\".concat(colorSchemeStorageKey, \"-\").concat(mode), value);\n            } catch {\n              // Unsupported\n            }\n            if (mode === 'light') {\n              newState.lightColorScheme = value;\n            }\n            if (mode === 'dark') {\n              newState.darkColorScheme = value;\n            }\n          });\n          return newState;\n        });\n      }\n    } else {\n      setState(currentState => {\n        const newState = {\n          ...currentState\n        };\n        const newLightColorScheme = value.light === null ? defaultLightColorScheme : value.light;\n        const newDarkColorScheme = value.dark === null ? defaultDarkColorScheme : value.dark;\n        if (newLightColorScheme) {\n          if (!joinedColorSchemes.includes(newLightColorScheme)) {\n            console.error(\"`\".concat(newLightColorScheme, \"` does not exist in `theme.colorSchemes`.\"));\n          } else {\n            newState.lightColorScheme = newLightColorScheme;\n            try {\n              localStorage.setItem(\"\".concat(colorSchemeStorageKey, \"-light\"), newLightColorScheme);\n            } catch (error) {\n              // Unsupported\n            }\n          }\n        }\n        if (newDarkColorScheme) {\n          if (!joinedColorSchemes.includes(newDarkColorScheme)) {\n            console.error(\"`\".concat(newDarkColorScheme, \"` does not exist in `theme.colorSchemes`.\"));\n          } else {\n            newState.darkColorScheme = newDarkColorScheme;\n            try {\n              localStorage.setItem(\"\".concat(colorSchemeStorageKey, \"-dark\"), newDarkColorScheme);\n            } catch (error) {\n              // Unsupported\n            }\n          }\n        }\n        return newState;\n      });\n    }\n  }, [joinedColorSchemes, colorSchemeStorageKey, defaultLightColorScheme, defaultDarkColorScheme]);\n  const handleMediaQuery = React.useCallback(event => {\n    if (state.mode === 'system') {\n      setState(currentState => {\n        const systemMode = event !== null && event !== void 0 && event.matches ? 'dark' : 'light';\n\n        // Early exit, nothing changed.\n        if (currentState.systemMode === systemMode) {\n          return currentState;\n        }\n        return {\n          ...currentState,\n          systemMode\n        };\n      });\n    }\n  }, [state.mode]);\n\n  // Ref hack to avoid adding handleMediaQuery as a dep\n  const mediaListener = React.useRef(handleMediaQuery);\n  mediaListener.current = handleMediaQuery;\n  React.useEffect(() => {\n    if (typeof window.matchMedia !== 'function' || !isMultiSchemes) {\n      return undefined;\n    }\n    const handler = function () {\n      return mediaListener.current(...arguments);\n    };\n\n    // Always listen to System preference\n    const media = window.matchMedia('(prefers-color-scheme: dark)');\n\n    // Intentionally use deprecated listener methods to support iOS & old browsers\n    media.addListener(handler);\n    handler(media);\n    return () => {\n      media.removeListener(handler);\n    };\n  }, [isMultiSchemes]);\n\n  // Handle when localStorage has changed\n  React.useEffect(() => {\n    if (storageWindow && isMultiSchemes) {\n      const handleStorage = event => {\n        const value = event.newValue;\n        if (typeof event.key === 'string' && event.key.startsWith(colorSchemeStorageKey) && (!value || joinedColorSchemes.match(value))) {\n          // If the key is deleted, value will be null then reset color scheme to the default one.\n          if (event.key.endsWith('light')) {\n            setColorScheme({\n              light: value\n            });\n          }\n          if (event.key.endsWith('dark')) {\n            setColorScheme({\n              dark: value\n            });\n          }\n        }\n        if (event.key === modeStorageKey && (!value || ['light', 'dark', 'system'].includes(value))) {\n          setMode(value || defaultMode);\n        }\n      };\n      // For syncing color-scheme changes between iframes\n      storageWindow.addEventListener('storage', handleStorage);\n      return () => {\n        storageWindow.removeEventListener('storage', handleStorage);\n      };\n    }\n    return undefined;\n  }, [setColorScheme, setMode, modeStorageKey, colorSchemeStorageKey, joinedColorSchemes, defaultMode, storageWindow, isMultiSchemes]);\n  return {\n    ...state,\n    mode: isClient ? state.mode : undefined,\n    systemMode: isClient ? state.systemMode : undefined,\n    colorScheme: isClient ? colorScheme : undefined,\n    setMode,\n    setColorScheme\n  };\n}","map":{"version":3,"names":["React","DEFAULT_MODE_STORAGE_KEY","DEFAULT_COLOR_SCHEME_STORAGE_KEY","getSystemMode","mode","window","matchMedia","mql","matches","undefined","processState","state","callback","systemMode","getColorScheme","lightColorScheme","darkColorScheme","initializeValue","key","defaultValue","value","localStorage","getItem","setItem","useCurrentColorScheme","options","defaultMode","defaultLightColorScheme","defaultDarkColorScheme","supportedColorSchemes","modeStorageKey","colorSchemeStorageKey","storageWindow","noSsr","joinedColorSchemes","join","isMultiSchemes","length","setState","useState","initialMode","concat","isClient","setIsClient","useEffect","colorScheme","setMode","useCallback","currentState","newMode","setColorScheme","includes","console","error","newState","newLightColorScheme","light","newDarkColorScheme","dark","handleMediaQuery","event","mediaListener","useRef","current","handler","arguments","media","addListener","removeListener","handleStorage","newValue","startsWith","match","endsWith","addEventListener","removeEventListener"],"sources":["C:/Users/ritti/Downloads/Mobilzone-main/Mobilzone-main/node_modules/@mui/system/esm/cssVars/useCurrentColorScheme.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { DEFAULT_MODE_STORAGE_KEY, DEFAULT_COLOR_SCHEME_STORAGE_KEY } from \"../InitColorSchemeScript/InitColorSchemeScript.js\";\nexport function getSystemMode(mode) {\n  if (typeof window !== 'undefined' && typeof window.matchMedia === 'function' && mode === 'system') {\n    const mql = window.matchMedia('(prefers-color-scheme: dark)');\n    if (mql.matches) {\n      return 'dark';\n    }\n    return 'light';\n  }\n  return undefined;\n}\nfunction processState(state, callback) {\n  if (state.mode === 'light' || state.mode === 'system' && state.systemMode === 'light') {\n    return callback('light');\n  }\n  if (state.mode === 'dark' || state.mode === 'system' && state.systemMode === 'dark') {\n    return callback('dark');\n  }\n  return undefined;\n}\nexport function getColorScheme(state) {\n  return processState(state, mode => {\n    if (mode === 'light') {\n      return state.lightColorScheme;\n    }\n    if (mode === 'dark') {\n      return state.darkColorScheme;\n    }\n    return undefined;\n  });\n}\nfunction initializeValue(key, defaultValue) {\n  if (typeof window === 'undefined') {\n    return undefined;\n  }\n  let value;\n  try {\n    value = localStorage.getItem(key) || undefined;\n    if (!value) {\n      // the first time that user enters the site.\n      localStorage.setItem(key, defaultValue);\n    }\n  } catch {\n    // Unsupported\n  }\n  return value || defaultValue;\n}\nexport default function useCurrentColorScheme(options) {\n  const {\n    defaultMode = 'light',\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    supportedColorSchemes = [],\n    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    storageWindow = typeof window === 'undefined' ? undefined : window,\n    noSsr = false\n  } = options;\n  const joinedColorSchemes = supportedColorSchemes.join(',');\n  const isMultiSchemes = supportedColorSchemes.length > 1;\n  const [state, setState] = React.useState(() => {\n    const initialMode = initializeValue(modeStorageKey, defaultMode);\n    const lightColorScheme = initializeValue(`${colorSchemeStorageKey}-light`, defaultLightColorScheme);\n    const darkColorScheme = initializeValue(`${colorSchemeStorageKey}-dark`, defaultDarkColorScheme);\n    return {\n      mode: initialMode,\n      systemMode: getSystemMode(initialMode),\n      lightColorScheme,\n      darkColorScheme\n    };\n  });\n  const [isClient, setIsClient] = React.useState(noSsr || !isMultiSchemes);\n  React.useEffect(() => {\n    setIsClient(true); // to rerender the component after hydration\n  }, []);\n  const colorScheme = getColorScheme(state);\n  const setMode = React.useCallback(mode => {\n    setState(currentState => {\n      if (mode === currentState.mode) {\n        // do nothing if mode does not change\n        return currentState;\n      }\n      const newMode = mode ?? defaultMode;\n      try {\n        localStorage.setItem(modeStorageKey, newMode);\n      } catch {\n        // Unsupported\n      }\n      return {\n        ...currentState,\n        mode: newMode,\n        systemMode: getSystemMode(newMode)\n      };\n    });\n  }, [modeStorageKey, defaultMode]);\n  const setColorScheme = React.useCallback(value => {\n    if (!value) {\n      setState(currentState => {\n        try {\n          localStorage.setItem(`${colorSchemeStorageKey}-light`, defaultLightColorScheme);\n          localStorage.setItem(`${colorSchemeStorageKey}-dark`, defaultDarkColorScheme);\n        } catch {\n          // Unsupported\n        }\n        return {\n          ...currentState,\n          lightColorScheme: defaultLightColorScheme,\n          darkColorScheme: defaultDarkColorScheme\n        };\n      });\n    } else if (typeof value === 'string') {\n      if (value && !joinedColorSchemes.includes(value)) {\n        console.error(`\\`${value}\\` does not exist in \\`theme.colorSchemes\\`.`);\n      } else {\n        setState(currentState => {\n          const newState = {\n            ...currentState\n          };\n          processState(currentState, mode => {\n            try {\n              localStorage.setItem(`${colorSchemeStorageKey}-${mode}`, value);\n            } catch {\n              // Unsupported\n            }\n            if (mode === 'light') {\n              newState.lightColorScheme = value;\n            }\n            if (mode === 'dark') {\n              newState.darkColorScheme = value;\n            }\n          });\n          return newState;\n        });\n      }\n    } else {\n      setState(currentState => {\n        const newState = {\n          ...currentState\n        };\n        const newLightColorScheme = value.light === null ? defaultLightColorScheme : value.light;\n        const newDarkColorScheme = value.dark === null ? defaultDarkColorScheme : value.dark;\n        if (newLightColorScheme) {\n          if (!joinedColorSchemes.includes(newLightColorScheme)) {\n            console.error(`\\`${newLightColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n          } else {\n            newState.lightColorScheme = newLightColorScheme;\n            try {\n              localStorage.setItem(`${colorSchemeStorageKey}-light`, newLightColorScheme);\n            } catch (error) {\n              // Unsupported\n            }\n          }\n        }\n        if (newDarkColorScheme) {\n          if (!joinedColorSchemes.includes(newDarkColorScheme)) {\n            console.error(`\\`${newDarkColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n          } else {\n            newState.darkColorScheme = newDarkColorScheme;\n            try {\n              localStorage.setItem(`${colorSchemeStorageKey}-dark`, newDarkColorScheme);\n            } catch (error) {\n              // Unsupported\n            }\n          }\n        }\n        return newState;\n      });\n    }\n  }, [joinedColorSchemes, colorSchemeStorageKey, defaultLightColorScheme, defaultDarkColorScheme]);\n  const handleMediaQuery = React.useCallback(event => {\n    if (state.mode === 'system') {\n      setState(currentState => {\n        const systemMode = event?.matches ? 'dark' : 'light';\n\n        // Early exit, nothing changed.\n        if (currentState.systemMode === systemMode) {\n          return currentState;\n        }\n        return {\n          ...currentState,\n          systemMode\n        };\n      });\n    }\n  }, [state.mode]);\n\n  // Ref hack to avoid adding handleMediaQuery as a dep\n  const mediaListener = React.useRef(handleMediaQuery);\n  mediaListener.current = handleMediaQuery;\n  React.useEffect(() => {\n    if (typeof window.matchMedia !== 'function' || !isMultiSchemes) {\n      return undefined;\n    }\n    const handler = (...args) => mediaListener.current(...args);\n\n    // Always listen to System preference\n    const media = window.matchMedia('(prefers-color-scheme: dark)');\n\n    // Intentionally use deprecated listener methods to support iOS & old browsers\n    media.addListener(handler);\n    handler(media);\n    return () => {\n      media.removeListener(handler);\n    };\n  }, [isMultiSchemes]);\n\n  // Handle when localStorage has changed\n  React.useEffect(() => {\n    if (storageWindow && isMultiSchemes) {\n      const handleStorage = event => {\n        const value = event.newValue;\n        if (typeof event.key === 'string' && event.key.startsWith(colorSchemeStorageKey) && (!value || joinedColorSchemes.match(value))) {\n          // If the key is deleted, value will be null then reset color scheme to the default one.\n          if (event.key.endsWith('light')) {\n            setColorScheme({\n              light: value\n            });\n          }\n          if (event.key.endsWith('dark')) {\n            setColorScheme({\n              dark: value\n            });\n          }\n        }\n        if (event.key === modeStorageKey && (!value || ['light', 'dark', 'system'].includes(value))) {\n          setMode(value || defaultMode);\n        }\n      };\n      // For syncing color-scheme changes between iframes\n      storageWindow.addEventListener('storage', handleStorage);\n      return () => {\n        storageWindow.removeEventListener('storage', handleStorage);\n      };\n    }\n    return undefined;\n  }, [setColorScheme, setMode, modeStorageKey, colorSchemeStorageKey, joinedColorSchemes, defaultMode, storageWindow, isMultiSchemes]);\n  return {\n    ...state,\n    mode: isClient ? state.mode : undefined,\n    systemMode: isClient ? state.systemMode : undefined,\n    colorScheme: isClient ? colorScheme : undefined,\n    setMode,\n    setColorScheme\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}